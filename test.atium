export func factorial (count: i32) -> i32 {
	let result: i32 = 1;
	let i: i32 = 0
	while i <= count {
			i = i + 1
			result = result * i
	}
}

export func fibonacci(n: i32) -> i32 {
	if n <= 1 {
		n
	}
	else {
		fibonacci(n - 2) + fibonacci(n - 1)
	}
}

export func point (x: f32, y: f32) -> (f32, f32) {
	(x, y)
}

export func point_x(p: (f32, f32)) -> f32 {
	p.0
}

export func point_y(p: (f32, f32)) -> f32 {
	p.1
}

import func set_color (r: f64, g: f64, b: f64)
import func draw_rect (x: f64, y: f64, width: f64, height: f64)

import func log_i32 (v: i32)
import func log_f32 (v: f32)

struct Color {
	r: f64, g: f64, b: f64
}

struct Point {
	x: f64, y: f64
}

func create_color (r: f64, g: f64, b: f64) -> Color {
	Color {
		r: r,
		g: g,
		b: b
	}
}

func create_point (x: f64, y: f64) -> Point {
	Point {
		x: x,
		y: y
	}
}

func draw_point (point: Point, color: Color) {
 	set_color(color.r, color.g, color.b)
 	draw_rect(point.x - 0.5, point.y - 0.5, 1, 1)
}

export func main () {
	let a = create_point(16, 16)
	let red = create_color(1, 0, 0)
	draw_point(a, red)
}